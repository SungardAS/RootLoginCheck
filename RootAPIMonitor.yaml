AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This sample, non-production-ready AWS CloudFormation template creates an
  Amazon SNS Topic, Amazon CloudWatch Event Rule and an AWS Lambda function to
  monitor API activity by AWS account root user and send an email notification
  to the SNS subscribers about the activity. (c) 2016 Amazon Web Services, Inc.
  or its affiliates. All Rights Reserved. This AWS Content is provided subject
  to the terms of the AWS Customer Agreement available at
  http://aws.amazon.com/agreement or other written agreement between Customer
  and Amazon Web Services, Inc.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: AWS Lambda parameters
        Parameters:
          - LambdaTimeout
          - LambdaS3Bucket
          - LambdaS3Key
      - Label:
          default: Cloudwatch Alert Log
        Parameters:
          - CloudWatchLogGroupName
          - CloudWatchLogDestinationArn
Parameters:
  CloudWatchLogGroupName:
    Description: Local Cloudwatch Log Group where alerts are sent
    Type: String
  CloudWatchLogDestinationArn:
    Type: String
    Description: CloudWatch Log Destination Arn. This destination must be in the same region with current one.
  LambdaTimeout:
    Type: Number
    Default: '60'
    Description: >-
      Enter a timeout value in seconds for the lambda function. Min is 3, max is
      300 and default is 60.
  LambdaS3Bucket:
    Description: Name of the S3 bucket where the lambda function is stored
    Type: String
  LambdaS3Key:
    Description: Name of the S3 key of the Lambda function (include the prefix as well)
    Type: String

Resources:
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - "/"
        - - !Ref CloudWatchLogGroupName
          - !Ref AWS::Region
  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn: CloudWatchLogGroup
    Properties:
      LogGroupName: !Join
        - "/"
        - - !Ref CloudWatchLogGroupName
          - !Ref AWS::Region
      FilterPattern: ""
      DestinationArn: !Ref CloudWatchLogDestinationArn
  EventsRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Events rule for monitoring root API activity
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
          - AWS Console Sign In via CloudTrail
        detail:
          userIdentity:
            type:
              - Root
          eventName:
            - ConsoleLogin
      Name: !Sub '${AWS::StackName}-RootActivityRule'
      State: ENABLED
      Targets:
        - Arn: !GetAtt 
            - RootActivityLambda
            - Arn
          Id: !Ref 'AWS::StackName'
  RootActivityLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      Handler: RootActivityLambda.lambda_handler
      Role: !GetAtt 
        - LambdaRootAPIMonitorRole
        - Arn
      Runtime: python2.7
      Timeout: !Ref LambdaTimeout
      Environment:
        Variables:
          CLOUDWATCHLOGNAME: !Join
            - "/"
            - - !Ref CloudWatchLogGroupName
              - !Ref AWS::Region
          CLOUDWATCHDESTINATION: !Ref CloudWatchLogDestinationArn
  LambdaRootAPIMonitorRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      RoleName: !Sub '${AWS::StackName}-LambdaRootAPIMonitorRole'
  LambdaRootAPIMonitorPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn: LambdaRootAPIMonitorRole
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: LogStreamAccess
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
            Resource:
              - 'arn:aws:logs:*:*:*'
          - Sid: SNSPublishAllow
            Effect: Allow
            Action:
              - 'sns:Publish'
            Resource:
              - 'arn:aws:sns:*:*:*'
          - Sid: ListAccountAlias
            Action:
              - 'iam:ListAccountAliases'
            Effect: Allow
            Resource: '*'
      PolicyName: !Sub '${AWS::StackName}-LambdaRootAPIMonitorPolicy'
      Roles:
        - !Ref LambdaRootAPIMonitorRole
  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref RootActivityLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 
        - EventsRule
        - Arn
Outputs:
  EventsRule:
    Value: !Ref EventsRule
    Export:
      Name: !Sub '${AWS::StackName}-RootAPIMonitorEventsRule'
    Description: Event Rule ID.
  LambdaFuncName:
    Value: !Ref RootActivityLambda
    Export:
      Name: !Sub '${AWS::StackName}-RootAPIMonitorLambda'
    Description: Lambda function logical ID.
  CloudWatchLogGroup:
    Value: !Ref CloudWatchLogGroup
    Description: Local Cloudwatch Log Group for alerts